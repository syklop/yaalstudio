import{a3 as a,s as r}from"./C50InBbU.js";const u=a("auth",{state:()=>({isAuthenticated:!1,isCheckingAuth:!1,isInitialized:!1,user:null,token:null,sessionExpiry:null,lastActivity:null,error:null}),getters:{isLoggedIn:e=>e.isAuthenticated&&!!e.token,isSessionExpired:e=>e.sessionExpiry?new Date>new Date(e.sessionExpiry):!1,userInfo:e=>e.user,authToken:e=>e.token,checkingAuth:e=>e.isCheckingAuth,isAdmin:e=>{var s;return e.isAuthenticated&&((s=e.user)==null?void 0:s.email)}},actions:{async initAuth(){if(this.isCheckingAuth){console.log("🔑 Auth déjà en cours - Attente...");let e=0;const s=50;for(;this.isCheckingAuth&&e<s;)await new Promise(t=>setTimeout(t,100)),e++;return console.log("🔑 Auth - Attente terminée, retour état:",this.isAuthenticated),this.isAuthenticated}if(this.isInitialized)return console.log("🔑 Auth déjà initialisé:",this.isAuthenticated),this.isAuthenticated;try{this.isCheckingAuth=!0,console.log("🔑 Début initialisation auth...");{const e=localStorage.getItem("yaal_auth_token"),s=localStorage.getItem("yaal_user"),t=localStorage.getItem("yaal_session_expiry");if(console.log("🔑 Données stockées:",{hasToken:!!e,hasUser:!!s,hasExpiry:!!t,expiry:t}),e&&s&&t){const o=new Date(t);if(new Date<o)try{this.token=e,this.user=JSON.parse(s),this.sessionExpiry=t,this.isAuthenticated=!0,this.lastActivity=new Date().toISOString(),console.log("🔑 Session locale restaurée, vérification token...");try{if(!await this.verifyToken())return console.log("❌ Token invalide côté serveur"),await this.clearAuthData(),!1;console.log("✅ Token valide côté serveur")}catch(i){console.warn("⚠️ Impossible de vérifier le token, mode dégradé:",i.message),this.error=`Connexion limitée: ${i.message}`}return console.log("✅ Authentification restaurée avec succès"),!0}catch(i){return console.error("❌ Erreur parsing données utilisateur:",i),await this.clearAuthData(),!1}else return console.log("⚠️ Session expirée localement"),await this.clearAuthData(),!1}else console.log("ℹ️ Aucune session stockée")}return console.log("ℹ️ Aucune authentification disponible"),!1}catch(e){return console.error("❌ Erreur critique lors de l'initialisation auth:",e),this.error=e.message,await this.clearAuthData(),!1}finally{this.isCheckingAuth=!1,this.isInitialized=!0,console.log("🔑 Initialisation auth terminée, état final:",this.isAuthenticated)}},async clearAuthData(){console.log("🧹 Nettoyage données auth..."),this.isAuthenticated=!1,this.user=null,this.token=null,this.sessionExpiry=null,this.lastActivity=null,this.error=null,localStorage.removeItem("yaal_auth_token"),localStorage.removeItem("yaal_user"),localStorage.removeItem("yaal_session_expiry")},async login(e){var s;try{this.loading=!0,this.error=null;const t=await $fetch("/api/auth/login",{method:"POST",body:{email:e.email,password:e.password}});if(t.success&&t.data)return this.isAuthenticated=!0,this.user=t.data.user,this.token=t.data.token,this.sessionExpiry=t.data.expiry,this.lastActivity=new Date().toISOString(),localStorage.setItem("yaal_auth_token",t.data.token),localStorage.setItem("yaal_user",JSON.stringify(t.data.user)),localStorage.setItem("yaal_session_expiry",t.data.expiry),console.log("✅ Connexion réussie"),{success:!0,user:t.data.user};throw new Error(t.message||"Erreur de connexion")}catch(t){return console.error("❌ Erreur de connexion:",t),this.error=((s=t.data)==null?void 0:s.message)||t.message||"Erreur de connexion",this.isAuthenticated=!1,this.user=null,this.token=null,{success:!1,error:this.error}}finally{this.loading=!1}},async logout(e=!1){console.log("🚪 Début déconnexion...");try{if(this.token)try{await $fetch("/api/auth/logout",{method:"POST",headers:{Authorization:`Bearer ${this.token}`}}),console.log("✅ Serveur notifié de la déconnexion")}catch(s){console.warn("⚠️ Erreur déconnexion serveur (continuons quand même):",s.message)}await this.clearAuthData(),console.log("✅ Déconnexion réussie"),e||await r("/login")}catch(s){console.error("❌ Erreur critique lors de la déconnexion:",s),await this.clearAuthData(),e||await r("/login")}},async verifyToken(){try{if(!this.token)return!1;const e=await $fetch("/api/auth/verify",{method:"GET",headers:{Authorization:`Bearer ${this.token}`}});return e.success?(e.data.user&&(this.user=e.data.user,localStorage.setItem("yaal_user",JSON.stringify(e.data.user))),this.lastActivity=new Date().toISOString(),!0):(this.logout(),!1)}catch(e){return console.error("❌ Erreur vérification token:",e),this.logout(),!1}},updateActivity(){this.lastActivity=new Date().toISOString(),this.isSessionExpired&&this.logout()},clearError(){this.error=null},setError(e){this.error=e}}});export{u as useAuthStore};
