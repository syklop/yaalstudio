import prisma from '~/server/utils/prisma'

export default defineEventHandler(async (event) => {
  try {
    console.log('üöÄ D√©but traitement contact avec Prisma')
    
    // R√©cup√©rer les donn√©es du formulaire
    const body = await readBody(event)
    
    // Validation des donn√©es
    const { 
      firstName, 
      email, 
      phone, 
      source = 'Landing Page',
      countryCode,
      dialCode,
      sessionId // ID de session pour le tracking des visiteurs
    } = body
    
    console.log('üìù Donn√©es re√ßues:', { firstName, email, phone, source })
    
    if (!firstName || !email || !phone) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Tous les champs sont requis (pr√©nom, email, t√©l√©phone)'
      })
    }

    // Validation email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Format d\'email invalide'
      })
    }

    // Validation t√©l√©phone fran√ßais
    const phoneRegex = /^[+]?[1-9][\d]{0,15}$/
    if (!phoneRegex.test(phone.replace(/[\s\-()]/g, ''))) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Format de t√©l√©phone invalide'
      })
    }

    // Obtenir les informations de la requ√™te pour analytics
    const userAgent = getHeader(event, 'user-agent') || ''
    const ipAddress = getHeader(event, 'x-forwarded-for') || getHeader(event, 'x-real-ip') || 'unknown'
    const referrer = getHeader(event, 'referer') || ''

    // Pr√©parer les donn√©es pour Prisma
    let contactSuccess = false
    let contactError = null
    let contactData = null

    try {
      console.log('üíæ Tentative d\'ajout dans la base de donn√©es Prisma')
      
      // V√©rifier si l'email existe d√©j√†
      const existingContact = await prisma.contact.findUnique({
        where: { email: email.toLowerCase().trim() }
      })

      if (existingContact) {
        console.log('‚ö†Ô∏è Contact d√©j√† existant, mise √† jour...')
        
        // Mettre √† jour le contact existant
        contactData = await prisma.contact.update({
          where: { email: email.toLowerCase().trim() },
          data: {
            firstName: firstName.trim(),
            phone: phone.trim(),
            source,
            countryCode,
            dialCode,
            userAgent,
            ipAddress,
            referrer,
            updatedAt: new Date()
          }
        })
      } else {
        // Cr√©er un nouveau contact
        contactData = await prisma.contact.create({
          data: {
            firstName: firstName.trim(),
            email: email.toLowerCase().trim(),
            phone: phone.trim(),
            source,
            countryCode,
            dialCode,
            userAgent,
            ipAddress,
            referrer,
            status: 'Non trait√©'
          }
        })
      }
      
      contactSuccess = true
      console.log('‚úÖ Contact sauvegard√© avec succ√®s en base de donn√©es')
      
      // Marquer le visiteur comme "converti" si sessionId est fourni
      if (sessionId) {
        try {
          await prisma.visitor.updateMany({
            where: { sessionId },
            data: { hasConverted: true }
          })
          console.log('‚úÖ Visiteur marqu√© comme converti')
        } catch (visitorError) {
          console.log('‚ö†Ô∏è Impossible de marquer le visiteur comme converti:', visitorError.message)
        }
      }
      
    } catch (dbError) {
      console.error('‚ùå Erreur base de donn√©es:', dbError.message)
      contactError = dbError.message
      contactSuccess = false
    }

    // Envoyer email de confirmation
    let emailSent = false
    let emailError = null
    
    console.log('üìß Tentative envoi email...')
    
    try {
      await $fetch('/api/emails/confirmation', {
        method: 'POST',
        body: {
          email,
          firstName,
          source
        }
      })
      emailSent = true
      console.log('‚úÖ Email envoy√© avec succ√®s')
      
    } catch (emailErr) {
      console.error('‚ùå Erreur email:', emailErr.message)
      emailError = emailErr.message
      emailSent = false
    }

    // Log du r√©sultat final
    console.log('üéØ R√©sultat final:', {
      contactSuccess,
      emailSent,
      contactError,
      emailError
    })

    // V√©rifier que le contact a √©t√© sauvegard√©
    if (!contactSuccess) {
      throw createError({
        statusCode: 500,
        statusMessage: 'Erreur lors de la sauvegarde du contact'
      })
    }

    // R√©ponse de succ√®s
    return {
      success: true,
      message: emailSent 
        ? 'Inscription r√©ussie ! Vous recevrez bient√¥t votre cadeau par email.'
        : 'Inscription r√©ussie ! Un probl√®me temporaire emp√™che l\'envoi de l\'email, nous vous contacterons bient√¥t.',
      data: {
        id: contactData.id,
        firstName,
        email: email.toLowerCase().trim(),
        timestamp: contactData.createdAt.toISOString(),
        databaseStatus: contactSuccess ? 'success' : 'failed',
        emailStatus: emailSent ? 'sent' : 'failed',
        ...(contactError && { contactError }),
        ...(emailError && { emailError })
      }
    }

  } catch (error) {
    console.error('üí• Erreur globale API contacts/add:', error)
    
    // Si c'est une erreur createError de Nuxt, la relancer
    if (error.statusCode) {
      throw error
    }
    
    // Sinon, erreur g√©n√©rique
    throw createError({
      statusCode: 500,
      statusMessage: 'Une erreur interne est survenue'
    })
  }
})