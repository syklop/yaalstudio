import { google } from 'googleapis'
import fs from 'fs'
import path from 'path'

export default defineEventHandler(async (event) => {
  try {
    console.log('üöÄ D√©but traitement contact')
    
    // R√©cup√©rer les donn√©es du formulaire
    const body = await readBody(event)
    
    // Validation des donn√©es
    const { firstName, email, phone, source = 'Landing Page' } = body
    
    console.log('üìù Donn√©es re√ßues:', { firstName, email, phone, source })
    
    if (!firstName || !email || !phone) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Tous les champs sont requis (pr√©nom, email, t√©l√©phone)'
      })
    }

    // Validation email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Format d\'email invalide'
      })
    }

    // Validation t√©l√©phone fran√ßais
    const phoneRegex = /^[+]?[1-9][\d]{0,15}$/
    if (!phoneRegex.test(phone.replace(/[\s\-()]/g, ''))) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Format de t√©l√©phone invalide'
      })
}

    // Configuration Google Sheets avec Service Account
    const config = useRuntimeConfig()
    const serviceAccountPath = config.googleServiceAccountPath
    const spreadsheetId = config.googleSheetsId
    
    console.log('‚öôÔ∏è Configuration Google Sheets:', {
      hasServiceAccountPath: !!serviceAccountPath,
      hasSpreadsheetId: !!spreadsheetId
    })

    // Pr√©parer les donn√©es pour Google Sheets
    const timestamp = new Date().toLocaleString('fr-FR', {
      timeZone: 'Europe/Paris',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    })

    const contactData = [
      timestamp,
      firstName.trim(),
      email.toLowerCase().trim(),
      phone.trim(),
      source,
      'Non trait√©'
    ]

    // Envoyer vers Google Sheets avec Service Account
    let sheetsSuccess = false
    let sheetsError = null

    if (serviceAccountPath && spreadsheetId) {
      try {
        console.log('üìä Tentative d\'ajout dans Google Sheets')
        
        // V√©rifier le fichier service account
        const fullPath = path.resolve(serviceAccountPath)
        
        if (fs.existsSync(fullPath)) {
          // Charger le service account
          const serviceAccount = JSON.parse(fs.readFileSync(fullPath, 'utf8'))
          console.log('‚úÖ Service account charg√©:', serviceAccount.client_email)
          
          // Authentification Google
          const auth = new google.auth.GoogleAuth({
            credentials: serviceAccount,
            scopes: ['https://www.googleapis.com/auth/spreadsheets']
          })
          
          const sheets = google.sheets({ version: 'v4', auth })
          
          // Requ√™te vers Google Sheets
          const request = {
            spreadsheetId,
            range: 'Contacts!A:F',
            valueInputOption: 'USER_ENTERED',
            insertDataOption: 'INSERT_ROWS',
            resource: {
              values: [contactData]
            }
          }
          
          console.log('üì§ Envoi vers Google Sheets...')
          const response = await sheets.spreadsheets.values.append(request)
          console.log('‚úÖ Succ√®s Google Sheets:', response.data.updates)
          
          sheetsSuccess = true
          
        } else {
          console.error('‚ùå Fichier service account introuvable:', fullPath)
          sheetsError = 'Fichier service account introuvable'
        }
        
      } catch (googleError) {
        console.error('‚ùå Erreur Google Sheets:', googleError.message)
        sheetsError = googleError.message
        sheetsSuccess = false
      }
    } else {
      console.log('‚ö†Ô∏è Configuration Google Sheets incompl√®te, passage en mode fallback')
      sheetsError = 'Configuration Google Sheets incompl√®te'
    }

    // Envoyer email de confirmation
    let emailSent = false
    let emailError = null
    
    console.log('üìß Tentative envoi email...')
    
    try {
      await $fetch('/api/emails/confirmation', {
        method: 'POST',
        body: {
          email,
          firstName,
          source
        }
      })
      emailSent = true
      console.log('‚úÖ Email envoy√© avec succ√®s')
      
    } catch (emailErr) {
      console.error('‚ùå Erreur email:', emailErr.message)
      emailError = emailErr.message
      emailSent = false
    }

    // Log du r√©sultat final
    console.log('üéØ R√©sultat final:', {
      sheetsSuccess,
      emailSent,
      sheetsError,
      emailError
    })

    // R√©ponse de succ√®s
    return {
      success: true,
      message: emailSent 
        ? 'Inscription r√©ussie ! Vous recevrez bient√¥t votre cadeau par email.'
        : 'Inscription r√©ussie ! Un probl√®me temporaire emp√™che l\'envoi de l\'email, nous vous contacterons bient√¥t.',
      data: {
        firstName,
        email: email.toLowerCase().trim(),
        timestamp: new Date().toISOString(),
        sheetsStatus: sheetsSuccess ? 'success' : 'failed',
        emailStatus: emailSent ? 'sent' : 'failed',
        ...(sheetsError && { sheetsError }),
        ...(emailError && { emailError })
      }
    }

  } catch (error) {
    console.error('üí• Erreur globale API contacts/add:', error)
    
    // Si c'est une erreur createError de Nuxt, la relancer
    if (error.statusCode) {
      throw error
    }
    
    // Sinon, erreur g√©n√©rique
    throw createError({
      statusCode: 500,
      statusMessage: 'Une erreur interne est survenue'
    })
  }
})