export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üõ°Ô∏è Middleware auth - Route:', to.path, 'depuis:', from?.path)
  
  // √âviter les redirections en boucle
  if (to.path === '/login' && from?.path === '/login') {
    console.log('üîÑ √âvitement boucle de redirection login')
    return
  }

  // Protection stricte du dashboard
  if (to.path.startsWith('/dashboard')) {
    console.log('üîç Acc√®s dashboard - V√©rification stricte...')
    
    try {
      const { useAuthStore } = await import('~/stores/auth.js')
      const authStore = useAuthStore()

      // Initialiser l'auth si n√©cessaire
      if (!authStore.isInitialized) {
        console.log('‚ö° Initialisation auth en cours...')
        const isAuthenticated = await authStore.initAuth()
        
        if (!isAuthenticated) {
          console.log('‚ùå √âchec authentification - Redirection login')
          return navigateTo('/login?redirect=' + encodeURIComponent(to.fullPath))
        }
      }

      // V√©rification stricte de l'authentification
      if (!authStore.isLoggedIn || authStore.isSessionExpired) {
        console.log('‚ùå Non authentifi√© ou session expir√©e - Redirection login')
        
        // Nettoyer les donn√©es au cas o√π
        try {
          await authStore.clearAuthData()
        } catch (clearError) {
          console.warn('‚ö†Ô∏è Erreur nettoyage donn√©es auth:', clearError)
        }
        
        return navigateTo('/login?redirect=' + encodeURIComponent(to.fullPath))
      }

      console.log('‚úÖ Authentification valid√©e - Acc√®s dashboard autoris√©')
      
    } catch (error) {
      console.error('‚ùå Erreur critique middleware:', error)
      return navigateTo('/login?error=auth_error')
    }
  }

  // Protection contre l'acc√®s √† login si d√©j√† connect√©
  if (to.path === '/login') {
    try {
      const { useAuthStore } = await import('~/stores/auth.js')
      const authStore = useAuthStore()
      
      // V√©rifier si l'utilisateur est d√©j√† connect√©
      if (authStore.isInitialized && authStore.isLoggedIn && !authStore.isSessionExpired) {
        console.log('üîÑ D√©j√† connect√© - Redirection vers dashboard')
        
        // Rediriger vers la page demand√©e ou dashboard
        const redirectTo = to.query.redirect || '/dashboard'
        return navigateTo(redirectTo)
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification login:', error)
      // Continuer vers login en cas d'erreur
    }
  }
}) 