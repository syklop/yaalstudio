#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';

console.log('üöÄ D√©marrage du build Vercel...');

try {
  // Installer les d√©pendances si n√©cessaire
  console.log('üì¶ V√©rification des d√©pendances...');
  if (!fs.existsSync('./node_modules/@prisma/client')) {
    console.log('‚ö†Ô∏è @prisma/client non trouv√©, installation...');
    execSync('npm install @prisma/client prisma', { stdio: 'inherit' });
  }

  // G√©n√©rer le client Prisma
  console.log('üì¶ G√©n√©ration du client Prisma...');
  execSync('npx prisma generate', { stdio: 'inherit' });
  
  // V√©rifier que le client Prisma a √©t√© g√©n√©r√©
  const prismaClientPath = './node_modules/.prisma/client';
  if (!fs.existsSync(prismaClientPath)) {
    throw new Error('Le client Prisma n\'a pas √©t√© g√©n√©r√© correctement');
  }
  
  console.log('‚úÖ Client Prisma g√©n√©r√© avec succ√®s');
  
  // Lancer le build Nuxt
  console.log('üèóÔ∏è D√©marrage du build Nuxt...');
  execSync('cross-env NODE_OPTIONS="--max-old-space-size=4096" nuxt build', { 
    stdio: 'inherit',
    env: {
      ...process.env,
      PRISMA_GENERATE_DATAPROXY: 'true'
    }
  });
  
  console.log('‚úÖ Build termin√© avec succ√®s');
  
} catch (error) {
  console.error('‚ùå Erreur lors du build:', error.message);
  process.exit(1);
} 