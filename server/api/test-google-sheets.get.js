export default defineEventHandler(async () => {
  try {
    console.log('üß™ Test des variables d\'environnement Google Sheets')
    
    const config = useRuntimeConfig()
    
    const diagnostics = {
      variables: {
        googleSheetsId: config.googleSheetsId ? '‚úÖ D√©fini' : '‚ùå Manquant',
        googleProjectId: config.googleProjectId ? '‚úÖ D√©fini' : '‚ùå Manquant',
        googleClientEmail: config.googleClientEmail ? '‚úÖ D√©fini' : '‚ùå Manquant',
        googlePrivateKey: config.googlePrivateKey ? '‚úÖ D√©fini' : '‚ùå Manquant',
        googlePrivateKeyId: config.googlePrivateKeyId ? '‚úÖ D√©fini' : '‚ùå Manquant',
        googleClientId: config.googleClientId ? '‚úÖ D√©fini' : '‚ùå Manquant'
      },
      tests: {}
    }
    
    // Test 1: V√©rification du format de la cl√© priv√©e
    if (config.googlePrivateKey) {
      try {
        const privateKey = config.googlePrivateKey
          .replace(/\\n/g, '\n')
          .replace(/"/g, '')
          .trim()
        
        if (privateKey.includes('BEGIN PRIVATE KEY') && privateKey.includes('END PRIVATE KEY')) {
          diagnostics.tests.privateKeyFormat = '‚úÖ Format valide'
        } else {
          diagnostics.tests.privateKeyFormat = '‚ùå Format invalide'
        }
      } catch (error) {
        diagnostics.tests.privateKeyFormat = `‚ùå Erreur: ${error.message}`
      }
    }
    
    // Test 2: Tentative de connexion Google Sheets
    if (config.googleSheetsId && config.googleClientEmail && config.googlePrivateKey) {
      try {
        const { getGoogleSheetsClient } = await import('~/server/utils/googleSheets')
        const sheets = await getGoogleSheetsClient()
        
        if (sheets) {
          diagnostics.tests.connection = '‚úÖ Connexion r√©ussie'
          
          // Test 3: V√©rification du spreadsheet
          try {
            const spreadsheetInfo = await sheets.spreadsheets.get({
              spreadsheetId: config.googleSheetsId
            })
            diagnostics.tests.spreadsheet = `‚úÖ Spreadsheet trouv√©: ${spreadsheetInfo.data.properties.title}`
            
            // Test 4: V√©rification de la feuille "Contacts"
            try {
              await sheets.spreadsheets.values.get({
                spreadsheetId: config.googleSheetsId,
                range: 'Contacts!A1:F1'
              })
              diagnostics.tests.contactsSheet = '‚úÖ Feuille "Contacts" accessible'
            } catch (error) {
              diagnostics.tests.contactsSheet = `‚ùå Feuille "Contacts" inaccessible: ${error.message}`
            }
            
          } catch (error) {
            diagnostics.tests.spreadsheet = `‚ùå Erreur spreadsheet: ${error.message}`
          }
        }
      } catch (error) {
        diagnostics.tests.connection = `‚ùå Erreur connexion: ${error.message}`
      }
    } else {
      diagnostics.tests.connection = '‚ùå Variables manquantes pour tester la connexion'
    }
    
    console.log('üìã R√©sultats des tests:', diagnostics)
    
    return {
      success: true,
      diagnostics,
      timestamp: new Date().toISOString()
    }
    
  } catch (error) {
    console.error('‚ùå Erreur dans le test Google Sheets:', error)
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }
  }
}) 