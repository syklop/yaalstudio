import bcrypt from 'bcryptjs'
import prisma from '~/server/utils/prisma'
import { generateToken, getExpiryDate } from '~/server/utils/jwt'

export default defineEventHandler(async (event) => {
  try {
    console.log('üîê Tentative de connexion admin')

    const body = await readBody(event)
    const { email, password } = body

    // Validation des donn√©es
    if (!email || !password) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Email et mot de passe requis'
      })
    }

    // Credentials admin d√©finis directement dans le code pour √©viter les conflits
    const ADMIN_EMAIL = 'admin@yaalstudio.com'

    // Debug des donn√©es re√ßues
    console.log('üìß Email re√ßu:', email)
    console.log('üîë Mot de passe re√ßu:', password)
    console.log('üìß Email admin attendu:', ADMIN_EMAIL)

    // V√©rifier les credentials admin
    if (email !== ADMIN_EMAIL) {
      console.log('‚ùå Email admin incorrect')
      console.log('Email re√ßu:', `"${email}"`)
      console.log('Email attendu:', `"${ADMIN_EMAIL}"`)
      throw createError({
        statusCode: 401,
        statusMessage: 'Identifiants incorrects'
      })
    }

    // Mot de passe admin d√©fini directement dans le code
    const ADMIN_PASSWORD = 'Yaal@Studio2024!Admin'
    
    // V√©rifier le mot de passe
    if (password !== ADMIN_PASSWORD) {
      console.log('‚ùå Mot de passe admin incorrect')
      console.log('Mot de passe re√ßu:', password)
      console.log('Mot de passe attendu:', ADMIN_PASSWORD)
      throw createError({
        statusCode: 401,
        statusMessage: 'Identifiants incorrects'
      })
    }

    console.log('‚úÖ Mot de passe admin correct')

    // Chercher ou cr√©er l'admin dans la base de donn√©es
    let admin = await prisma.admin.findUnique({
      where: { email: ADMIN_EMAIL }
    })

    if (!admin) {
      // Hasher le mot de passe pour le stocker en base
      const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 12)
      
      // Cr√©er l'admin s'il n'existe pas
      admin = await prisma.admin.create({
        data: {
          email: ADMIN_EMAIL,
          password: hashedPassword,
          name: 'Administrateur YaalStudio'
        }
      })
      console.log('‚úÖ Compte admin cr√©√©')
    }

    // G√©n√©rer le token JWT
    const tokenPayload = {
      adminId: admin.id,
      email: admin.email,
      type: 'admin'
    }

    const token = generateToken(tokenPayload)
    const expiryDate = getExpiryDate()

    // Obtenir les informations de la requ√™te
    const userAgent = getHeader(event, 'user-agent') || ''
    const ipAddress = getHeader(event, 'x-forwarded-for') || getHeader(event, 'x-real-ip') || 'unknown'

    // Sauvegarder la session en base de donn√©es
    await prisma.adminSession.create({
      data: {
        token,
        adminId: admin.id,
        expiresAt: expiryDate,
        userAgent,
        ipAddress
      }
    })

    // Mettre √† jour la derni√®re connexion
    await prisma.admin.update({
      where: { id: admin.id },
      data: { lastLogin: new Date() }
    })

    console.log('‚úÖ Connexion admin r√©ussie')

    return {
      success: true,
      message: 'Connexion r√©ussie',
      data: {
        user: {
          id: admin.id,
          email: admin.email,
          name: admin.name,
          lastLogin: admin.lastLogin
        },
        token,
        expiry: expiryDate.toISOString()
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur login admin:', error)

    if (error.statusCode) {
      throw error
    }

    throw createError({
      statusCode: 500,
      statusMessage: 'Erreur interne du serveur'
    })
  }
}) 